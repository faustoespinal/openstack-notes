heat_template_version: newton
description: >
  This template defines the startup of 1 edison-node capable of serving
  as either a kubernetes master-node or minion-node.
parameters:
  master_name:
    type: string
    default: edison-master
  key_name:
    type: string
    default: edison-151-ssh
  flavor:
    type: string
    default: fausto-medium-smp
  image:
    type: string
    default: centos-7
  floating_ip:
    type: string
    default: 3.28.94.24
  ext_network:
    type: string
    default: ext-net0
  network:
    type: string
    default: edison-network
  private_subnet:
    type: string
    default: edison-subnet
resources:
  edison_cfg:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        chpasswd:
          list: |
            centos:edison
          expire: False
        write_files:
        - content:  | 
                #!/bin/bash
                echo 'kubeadm-master setup....'
                echo '   Make sure to provide internal IP address of master node as argument!!'
                source ~centos/.bashrc
                systemctl restart docker kubelet
                kubeadm init --apiserver-advertise-address=edison-master --skip-preflight-checks --token 611ca5.0b5130606eb94045 --token-ttl 0 --apiserver-cert-extra-sans="127.0.0.1,3.28.94.24,$1"
                echo 'done...'
          path: /root/kubeadm-master.sh        
        - content:  | 
                #!/bin/bash
                echo 'kubeadm-minion setup....'
                echo '   make sure you provide master internal IP address as argument!!!'
                source ~centos/.bashrc
                export no_proxy="$no_proxy,$1"
                systemctl restart docker kubelet
                kubeadm join --skip-preflight-checks --token 611ca5.0b5130606eb94045 $1:6443
                echo 'done...'
          path: /root/kubeadm-minion.sh        
        - content:  | 
                #!/bin/bash
                echo 'post-kubeadm setup....'
                mkdir -p $HOME/.kube
                sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
                sudo chown $(id -u):$(id -g) $HOME/.kube/config
                kubectl get nodes
                kubectl get pods --all-namespaces
                kubectl apply --filename https://git.io/weave-kube-1.6
                echo 'done...'
          path: /home/centos/post-kubeadm.sh
        - content:  |
                [kubernetes]
                name=Kubernetes
                baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
                enabled=1
                sslverify=0
                gpgcheck=1
                repo_gpgcheck=1
                gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          path: /etc/yum.repos.d/kubernetes.repo
        - content:  | 
                {
                  "insecure-registries" : ["3.28.93.31:5000"]
                }
          path: /etc/docker/daemon.json
        - content:  |
                -----BEGIN CERTIFICATE-----
                MIIDozCCAougAwIBAgIQeO8XlqAMLhxvtCap35yktzANBgkqhkiG9w0BAQsFADBS
                MQswCQYDVQQGEwJVUzEhMB8GA1UEChMYR2VuZXJhbCBFbGVjdHJpYyBDb21wYW55
                MSAwHgYDVQQDExdHRSBFeHRlcm5hbCBSb290IENBIDIuMTAeFw0xNTAzMDUwMDAw
                MDBaFw0zNTAzMDQyMzU5NTlaMFIxCzAJBgNVBAYTAlVTMSEwHwYDVQQKExhHZW5l
                cmFsIEVsZWN0cmljIENvbXBhbnkxIDAeBgNVBAMTF0dFIEV4dGVybmFsIFJvb3Qg
                Q0EgMi4xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzCzT4wNRZtr2
                XTzoTMjppjulZfG35/nOt44q2zg47sxwgZ8o4qjcrwzIhsntoFrRQssjXSF5qXdC
                zsm1G7f04qEBimuOH/X+CidWX+sudCS8VyRjXi9cyvUW4/mYKCLXv5M6HhEoIHCD
                Xdo6yUr5mSrf18qRR3yUFz0HYXopa2Ls3Q6lBvEUO2Xw04vqVvmg1h7S5jYuZovC
                oIbd2+4QGdoSZPgtSNpCxSR+NwtPpzYZpmqiUuDGfVpO3HU42APB0c60D91cJho6
                tZpXYHDsR/RxYGm02K/iMGefD5F4YMrtoKoHbskty6+u5FUOrUgGATJJGtxleg5X
                KotQYu8P1wIDAQABo3UwczASBgNVHRMBAf8ECDAGAQH/AgECMA4GA1UdDwEB/wQE
                AwIBBjAuBgNVHREEJzAlpCMwITEfMB0GA1UEAxMWR0UtUm9vdC1DT00tUlNBLTIw
                NDgtMTAdBgNVHQ4EFgQU3N2mUCJBCLYgtpZyxBeBMJwNZuowDQYJKoZIhvcNAQEL
                BQADggEBACF4Zsf2Nm0FpVNeADUH+sl8mFgwL7dfL7+6n7hOgH1ZXcv6pDkoNtVE
                0J/ZPdHJW6ntedKEZuizG5BCclUH3IyYK4/4GxNpFXugmWnKGy2feYwVae7Puyd7
                /iKOFEGCYx4C6E2kq3aFjJqiq1vbgSS/B0agt1D3rH3i/+dXVxx8ZjhyZMuN+cgS
                pZL4gnhnSXFAGissxJhKsNkYgvKdOETRNn5lEgfgVyP2iOVqEguHk2Gu0gHSouLu
                5ad/qyN+Zgbjx8vEWlywmhXb78Gaf/AwSGAwQPtmQ0310a4DulGxo/kcuS78vFH1
                mwJmHm9AIFoqBi8XpuhGmQ0nvymurEk=
                -----END CERTIFICATE-----
          path: /home/centos/GE_External_Root_CA_2_1.crt
        - content:  | 
                -----BEGIN RSA PRIVATE KEY-----
                MIIEogIBAAKCAQEAuVnqJo45gCqmNZ35kI2gFEe8HVlD53pD2ydmxlxxs9MhPXdp
                vUHm1KoCOrfObnB2kc0mAniQxiSiytHIedlyj/jhRxv9ITBzZTKceqoL0V/1I42S
                99JGm4dgsK0t7tt5Qm/Kqj3Zc4a3xt5KTrdCQSe0AwLLzUzilj0o5qdNqZWgvGMO
                4qp0QAS3PjnHfJo4YeaDaNrM1BWyU5f3SNx/M74IJMs90MjYLZq9hnJD4MS0mP4B
                +SjYP16VSOtcdn185AC7VEkOtovLrgvkpjwXCfD58twf7R+1OIP3zpRt2+LBRgJo
                Sp/VQd0TvUmhC3kpAhRFXUEjYNqTap74sl/oxQIDAQABAoIBACcWpD+/TLcPx3+V
                MjVe+LxuKGjUE3L0oOzN0WnRwxTWWLM6xKzqAgElXVT+wGUgCJFU/0gUHwv6W+6D
                8VBpIDTmmrPBXk+qhRt5YfCofdeI8gyuZaknykYwdZ6s1vwBgwAUzVu7sWkgpw8k
                f+07zpgpBFiCNXK1XS+r9D04WTODAyEwZp84/j4P5LQQCq/qhwjviD0Jq3j+c0hX
                V1Fu/Fil9SWqHhib1k6eLWyjpcm8uZEo29MS/z3p87/+JSz+aJI74JTt1UMqxEbT
                N/JaPVxeMW65+aij4G91cNK9CiGt/370r9LrmipX3Xgj175X6uVsa83SNyl859Fo
                4mkdZqECgYEA9PNubptsIHMw9YH7paoqNkJ7VIWfkgAxpA+20jkq9+DGXCHs0lVt
                cPdlLOVuDXkDI6fuumvW2CqTC0nsN9QbQM8mRrSevPWRlrHa+6a2/5Pvz16OWPmP
                YUSUwlvC+wYGqu0IgqExK6yEWoEdnqdw4MW/dFIP7RhI3LOLnxUjIZkCgYEAwbZB
                qjHgJm/4nvgmOWIrH7aSE8dR0V3ZH09L3AM44HrXQuJgGb85kGW/Y+/+xwppWzD9
                2Z88I0tSY6yJR/RHkf7glwYM2w+3VRedH3/XMFgP1wHR7abx1EVTIfWgejZqUZCi
                DH4LasZDl8PFBrP7XhYAlyNFa6JFyMAQhPm5VA0CgYBauux1tcYYQvKojWv70gru
                rDNofFI9zyqT/WoXditvQ2fV6o8A3bm69TgZqCXaga9i/qoTjSw4R5TNwqTnjP5H
                RDOGTxLZJRC3Q8u8GOWBx3c1VW3ekRnFypRbZYfUWUgQ+dmEIVbIOY+QwnCJOrY5
                26Vt3ZOem7cpYKvf0gGASQKBgHxZWPG+Lpu+CSVTOoZfpDspYcBclQMHcZeNua60
                StCfSove8b3VaUhuaFvo9e4jmto1Kt+GPn6RnYPqf/22rDLmIJoSAjKldhSjofNU
                h3i7Lv/gZThfkKGpFuKX4LpTMBDH/Z5zUzTprP5BZ7sT0mrlSN+8fpXHh3CFCpWy
                EOwJAoGAfmEx38cIZCykcVjkiK6PnwyjcWC1i13bGUtSpayS2783ZYLNcFYPIxib
                eM/6EA/Qzi0WDPt9M9cXiyV1EW6wwChY7LOExteXxzGtPpIKc7c1GeIFqHs9nIdK
                lp2UQ5wc/0yI4brB6xxTql/xDN+v0mbGqdaCz1rSvWgGWcmqCc0=
                -----END RSA PRIVATE KEY-----
          path: /home/centos/edison-151-ssh.pem
        runcmd:
        - [ ls, -l, / ]
        - [ sh, -xc, "echo $(date) ': hello edison-vm!'" ]
        - [ sh, -c, echo "=========hello edison-vm'=========" ]
        - ls -l /root
        - echo "proxy=http://3.28.29.241:88" >> /etc/yum.conf
        - echo "$(ip addr show eth0 | grep 'inet ' | awk '{ print $2}' | awk -F '/' '{ print $1}')" > /home/centos/ipaddr.txt
        - sudo printf "$(cat /home/centos/ipaddr.txt)       $HOSTNAME\n" >> /etc/hosts
        - printf "# Source global definitions\nif [ -f /etc/bashrc ]; then\n   . /etc/bashrc\nfi" > /home/centos/.bashrc
        - printf "\n\nexport http_proxy=http://3.28.29.241:88\n" >> /home/centos/.bashrc
        - printf "export https_proxy=http://3.28.29.241:88\n" >> /home/centos/.bashrc
        - printf "export ftp_proxy=http://3.28.29.241:88\n" >> /home/centos/.bashrc
        - printf 'export no_proxy="ge.com, localhost, $(cat /home/centos/ipaddr.txt), 127.0.0.1"\n' >> /home/centos/.bashrc
        - printf "export proxy=http://3.28.29.241:88\n" >> /home/centos/.bashrc
        - printf "\nDNS1=10.220.220.220\nDNS2=10.220.220.221\n" >> /etc/sysconfig/network-scripts/ifcfg-eth0
        - printf "\n20.20.20.220:/var/nfsshare	/mnt/nfs/var/nfsshare	nfs	rw,async,hard,intr	0\n" >> /etc/fstab
        - sudo printf "\n\n# GE Root certificate\n" >> /etc/ssl/certs/ca-bundle.crt
        - sudo cat /home/centos/GE_External_Root_CA_2_1.crt >> /etc/ssl/certs/ca-bundle.crt
        - sudo printf "\n\n# GE Root certificate\n" >> /etc/pki/tls/certs/ca-bundle.crt
        - sudo cat /home/centos/GE_External_Root_CA_2_1.crt >> /etc/pki/tls/certs/ca-bundle.crt
        - sudo chown centos /home/centos
        - sudo chgrp centos /home/centos
        - sudo chown centos /home/centos/.bashrc
        - sudo chgrp centos /home/centos/.bashrc
        - sudo cp /home/centos/.bashrc /home/centos/.bash_profile 
        - sudo service network restart
        - sudo systemctl stop firewalld
        - sudo systemctl disable firewalld
        - sudo yum -y update
        - sudo yum -y install git
        - sudo sudo setenforce 0
        - sudo yum --enablerepo=kubernetes clean metadata
        - sudo yum install -y docker kubelet kubeadm kubectl 
        - sudo systemctl enable kubelet 
        - systemctl start kubelet
        - sudo mkdir /etc/systemd/system/docker.service.d/
        - sudo printf '[Service]\nEnvironment="HTTP_PROXY=http://3.28.29.241:88"\n' > /etc/systemd/system/docker.service.d/http-proxy.conf
        - sudo printf 'Environment="HTTPS_PROXY=http://3.28.29.241:88"\n' >> /etc/systemd/system/docker.service.d/http-proxy.conf
        - sudo systemctl stop firewalld
        - sudo systemctl disable firewalld
        - sudo systemctl enable docker
        - sudo systemctl restart docker
        - sudo printf "\n\n# GE Root certificate\n" >> /etc/ssl/certs/ca-bundle.crt
        - sudo cat /home/centos/GE_External_Root_CA_2_1.crt >> /etc/ssl/certs/ca-bundle.crt
        - sudo printf "\n\n# GE Root certificate\n" >> /etc/pki/tls/certs/ca-bundle.crt
        - sudo cat /home/centos/GE_External_Root_CA_2_1.crt >> /etc/pki/tls/certs/ca-bundle.crt
        - cd /home/centos
        - chmod 600 /home/centos/edison-151-ssh.pem
        - chown centos /home/centos/edison-151-ssh.pem
        - chmod +x  /home/centos/post-kubeadm.sh
        - chmod +x  /root/kubeadm-master.sh
        - chmod +x  /root/kubeadm-minion.sh
        - git clone https://github.build.ge.com/edison-pocs/openstack-k8s-notes.git
        - sudo echo "FINISHED kubeadm NODE CONFIGURATION !!!!!"
  node_cfg:
    # this resource is a simple shell script. No inputs or outputs are
    # specified since this is not supported by cloud-init but values
    # could be inserted into the script using str_replace.
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        ls -l /root
        sudo echo 'FINISHED NODE CONFIGURATION...'
  edison_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: edison_cfg}
      - config: {get_resource: node_cfg}
  k8s_master:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: {get_param: master_name}
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - port: { get_resource: k8s_master_port }
  k8s_master_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: network }
      fixed_ips:
        - subnet_id: { get_param: private_subnet }
  k8s_master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: ext_network }
      floating_ip_address: { get_param: floating_ip }
      port_id: { get_resource: k8s_master_port }
  k8s_minion_1:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-1
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
  k8s_minion_2:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-2
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
  k8s_minion_3:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-3
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
  k8s_minion_4:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-4
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
  k8s_minion_5:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-5
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
  k8s_minion_6:
    type: OS::Nova::Server
    properties:
      admin_pass: edison
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key_name}
      name: edison-minion-6
      user_data_format: RAW
      user_data:
        get_resource: edison_cfg
      networks:
        - { network: {get_param: network} }
outputs:
  k8s_master_private_ip:
    description: IP address of k8s_master in private network
    value: { get_attr: [ k8s_master, first_address ] }
  k8s_master_public_ip:
    description: Floating IP address of k8s_master in public network
    value: { get_attr: [ k8s_master_floating_ip, floating_ip_address ] }
# - { network: {get_param: network}, fixed_ip: {get_param: fixed_ip} }